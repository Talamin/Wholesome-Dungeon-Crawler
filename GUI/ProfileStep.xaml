<UserControl x:Name="ProfileStepControl" x:Class="WholesomeDungeonCrawler.GUI.ProfileStep"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
             xmlns:local="clr-namespace:WholesomeDungeonCrawler.GUI"
             mc:Ignorable="d">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!-- MahApps.Metro resource dictionaries. Make sure that all file names are Case Sensitive! -->
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />
                <!-- Accent and AppTheme setting -->
                <ResourceDictionary Source="pack://application:,,,/WholesomeDungeonCrawler;component/GUI/Theme.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseDark.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>
    <ScrollViewer VerticalScrollBarVisibility="Auto" MaxHeight="400">
        <Grid>
            <Grid.Resources>
                <local:TypeConverter x:Key="TypeConverter"/>
                <local:VectorValidation x:Key="VectorValidation"/>
                <local:MultipleEntriesValidation x:Key="MultipleEntriesValidation"/>
                <local:TextBoxVectorConverter x:Key="TextBoxVectorConverter"/>
            </Grid.Resources>
            <StackPanel>

                <GroupBox Header="Step Details" BorderBrush="{x:Null}">
                    <GroupBox.Background>
                        <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                            <GradientStop Color="#FF34e89e" Offset="0"/>
                            <GradientStop Color="#FF0f3443" Offset="1"/>
                        </LinearGradientBrush>
                    </GroupBox.Background>
                    <StackPanel>
                        <TextBox x:Name="txtStepName" Controls:TextBoxHelper.Watermark="Step Name" Controls:TextBoxHelper.UseFloatingWatermark="True" Margin="5" BorderBrush="{x:Null}" 
                                 Text="{Binding SelectedItem.Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        <ComboBox x:Name="cbStepFaction" Margin="5" Controls:TextBoxHelper.UseFloatingWatermark="True" SelectedValue="{Binding SelectedItem.StepFaction, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Controls:TextBoxHelper.Watermark="Step faction" />
                        <ComboBox x:Name="cbStepRole" Margin="5" Controls:TextBoxHelper.UseFloatingWatermark="True" SelectedValue="{Binding SelectedItem.StepRole, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Controls:TextBoxHelper.Watermark="Step role" />
                    </StackPanel>
                </GroupBox>
                
                <!--MoveAlongPath-->
                <StackPanel>
                    <StackPanel>
                        <StackPanel.Style>
                            <Style TargetType="StackPanel">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=ProfileStepControl, Path=SelectedItem, Converter={StaticResource TypeConverter}}" Value="MoveAlongPathModel">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </StackPanel.Style>
                        <GroupBox Header="MoveAlongPath Step" BorderBrush="{x:Null}">
                            <GroupBox.Background>
                                <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                    <GradientStop Color="#FF34e89e" Offset="0"/>
                                    <GradientStop Color="#FF0f3443" Offset="1"/>
                                </LinearGradientBrush>
                            </GroupBox.Background>

                            <StackPanel>
                                <DataGrid x:Name="dgFPS" Margin="5" CanUserAddRows="False" IsReadOnly="True" MaxHeight="150" SelectionMode="Single" SelectedCellsChanged="DgFPSSelectionChanged"/>
                                <StackPanel Orientation="Horizontal"  Margin="5">
                                    <Button x:Name="btnAddVector" Content="Add" Margin="0 5 5 5" Click="btnAddVector_Click"/>
                                    <Button x:Name="btnDeleteVector" Content="Delete" Margin="0 5 5 5" Click="btnDeleteVector_Click"/>
                                </StackPanel>
                                <StackPanel>
                                    <Controls:ToggleSwitch x:Name="chkRecordPath" OnLabel="Record Path" OffLabel="Record Path" IsChecked="False" Margin="10 5" />                                    
                                </StackPanel>
                                <StackPanel>
                                    <Controls:ToggleSwitch x:Name="chkIgnoreMAPFights" IsChecked="{Binding SelectedItem.IgnoreFightsDuringPath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" OnLabel="Ignore fights during path" OffLabel="Ignore fights during path" Margin="10 5"/>
                                </StackPanel>
                            </StackPanel>

                        </GroupBox>
                    </StackPanel>                
                </StackPanel>
                
                <!--InteractWith-->
                <StackPanel>
                    <StackPanel.Style>
                        <Style TargetType="StackPanel">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=ProfileStepControl, Path=SelectedItem, Converter={StaticResource TypeConverter}}" Value="InteractWithModel">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </StackPanel.Style>
                    <GroupBox Header="InteractWith Step" BorderBrush="{x:Null}">
                        <GroupBox.Background>
                            <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                <GradientStop Color="#FF34e89e" Offset="0"/>
                                <GradientStop Color="#FF0f3443" Offset="1"/>
                            </LinearGradientBrush>
                        </GroupBox.Background>
                        <StackPanel>
                            <StackPanel Orientation="Horizontal"  Margin="5">
                                <StackPanel Orientation="Horizontal"  Margin="5">
                                    <TextBox Name="txtInteractO" MinWidth="170" Controls:TextBoxHelper.UseFloatingWatermark="True" Controls:TextBoxHelper.Watermark="Object Entries" Margin="5">
                                        <TextBox.Text>
                                            <Binding  NotifyOnValidationError="True" UpdateSourceTrigger="PropertyChanged" Path="SelectedItem.ObjectId">
                                                <Binding.ValidationRules>
                                                    <local:MultipleEntriesValidation/>
                                                </Binding.ValidationRules>
                                            </Binding>
                                        </TextBox.Text>
                                    </TextBox>
                                    <Button x:Name="btnGetNearestGO" Content="Nearest Object ID" Margin="5" Click="btnGetNearestGO_Click"/>
                                </StackPanel>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal"  Margin="5">
                                <TextBox Name="txtInteractPos" MinWidth="170" Controls:TextBoxHelper.UseFloatingWatermark="True" Controls:TextBoxHelper.Watermark="Object Position" Margin="5">
                                    <TextBox.Text>
                                        <Binding  NotifyOnValidationError="True" UpdateSourceTrigger="PropertyChanged" Path="SelectedItem.ExpectedPosition" Converter="{StaticResource TextBoxVectorConverter}">
                                            <Binding.ValidationRules>
                                                <local:VectorValidation/>
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <Button x:Name="btnGetNearestGOPos" Content="Nearest Object Position" Margin="5" Click="btnGetNearestGOPos_Click"/>
                            </StackPanel>
                            <StackPanel>
                                <Controls:ToggleSwitch x:Name="chkInteractWithSkipIfNotFound" IsChecked="{Binding SelectedItem.SkipIfNotFound, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" OnLabel="SkipIfNotFound" OffLabel="SkipIfNotFound" Margin="10 5"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal"  Margin="5">
                                <Controls:NumericUpDown x:Name="txtInteractD" Controls:TextBoxHelper.Watermark="Interact distance" Controls:TextBoxHelper.UseFloatingWatermark="True" Margin="5" BorderBrush="{x:Null}" Value="{Binding SelectedItem.InteractDistance, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                            </StackPanel>
                        </StackPanel>
                    </GroupBox>
                </StackPanel>
                
                <!--TalkToUnit-->
                <StackPanel>
                    <StackPanel.Style>
                        <Style TargetType="StackPanel">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=ProfileStepControl, Path=SelectedItem, Converter={StaticResource TypeConverter}}" Value="TalkToUnitModel">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </StackPanel.Style>
                    <GroupBox Header="TalkToUnit Step" BorderBrush="{x:Null}">
                        <GroupBox.Background>
                            <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                <GradientStop Color="#FF34e89e" Offset="0"/>
                                <GradientStop Color="#FF0f3443" Offset="1"/>
                            </LinearGradientBrush>
                        </GroupBox.Background>
                        <StackPanel>
                            <StackPanel Orientation="Horizontal"  Margin="5">
                                <TextBox Name="txtTalkToUnitTargetPos" MinWidth="200" Controls:TextBoxHelper.UseFloatingWatermark="True" Controls:TextBoxHelper.Watermark="TalkToUnit Position" Margin="5">
                                    <TextBox.Text>
                                        <Binding  NotifyOnValidationError="True" UpdateSourceTrigger="PropertyChanged" Path="SelectedItem.ExpectedPosition" Converter="{StaticResource TextBoxVectorConverter}">
                                            <Binding.ValidationRules>
                                                <local:VectorValidation/>
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <Button x:Name="btnTalkToUnitGetCurrentPos" Content="Get Target Position" Margin="5" Click="btnTalkToUnitGetCurrentPos_Click" />
                            </StackPanel>
                            <StackPanel Orientation="Horizontal"  Margin="5">
                                <Controls:NumericUpDown x:Name="txtTalkToUnitId" Controls:TextBoxHelper.Watermark="Unit ID" Controls:TextBoxHelper.UseFloatingWatermark="True" Margin="5" BorderBrush="{x:Null}" Value="{Binding SelectedItem.UnitId, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                <Button x:Name="btnGetTalkToUnitId" Content="Get Target Unit Id" Margin="5" Click="btnGetTalkToUnitTargetEntry_Click"/>
                            </StackPanel>
                            <Controls:NumericUpDown Controls:TextBoxHelper.Watermark="Gossip Index" Controls:TextBoxHelper.UseFloatingWatermark="True" Margin="5" BorderBrush="{x:Null}" Value="{Binding SelectedItem.GossipIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                            <Controls:ToggleSwitch x:Name="chkTalkToUnitSkipIfNotFound" IsChecked="{Binding SelectedItem.SkipIfNotFound, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" OnLabel="SkipIfNotFound" OffLabel="SkipIfNotFound" Margin="10 5"/>
                        </StackPanel>
                    </GroupBox>
                </StackPanel>
                
                <!--DefendSpot-->
                <StackPanel>
                    <StackPanel.Style>
                        <Style TargetType="StackPanel">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=ProfileStepControl, Path=SelectedItem, Converter={StaticResource TypeConverter}}" Value="DefendSpotModel">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </StackPanel.Style>
                    <GroupBox Header="DefendSpot Step" BorderBrush="{x:Null}">
                        <GroupBox.Background>
                            <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                <GradientStop Color="#FF34e89e" Offset="0"/>
                                <GradientStop Color="#FF0f3443" Offset="1"/>
                            </LinearGradientBrush>
                        </GroupBox.Background>
                        <StackPanel>

                            <StackPanel Orientation="Horizontal"  Margin="5">
                                <TextBox Name="txtDefendSpotTargetPos" MinWidth="200" Controls:TextBoxHelper.UseFloatingWatermark="True" Controls:TextBoxHelper.Watermark="Defend Position" Margin="5">
                                    <TextBox.Text>
                                        <Binding  NotifyOnValidationError="True" UpdateSourceTrigger="PropertyChanged" Path="SelectedItem.DefendPosition" Converter="{StaticResource TextBoxVectorConverter}">
                                            <Binding.ValidationRules>
                                                <local:VectorValidation/>
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <Button x:Name="btnDefendSpotGetCurrentPos" Content="Get Current Position" Margin="5" Click="btnDefendSpotGetCurrentPos_Click" />
                            </StackPanel>
                            <Controls:NumericUpDown x:Name="txtDefendSpotRadius" Controls:TextBoxHelper.Watermark="Defend radius" Controls:TextBoxHelper.UseFloatingWatermark="True" Margin="10 5" BorderBrush="{x:Null}" Value="{Binding SelectedItem.DefendSpotRadius, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                            <Controls:NumericUpDown x:Name="txtDefendSpotTimer" Controls:TextBoxHelper.Watermark="Duration in seconds" Controls:TextBoxHelper.UseFloatingWatermark="True" Margin="10 5" BorderBrush="{x:Null}" Value="{Binding SelectedItem.Timer, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                            <Controls:NumericUpDown x:Name="txtDefendSpotZLimit" Controls:TextBoxHelper.Watermark="Z Limit" Controls:TextBoxHelper.UseFloatingWatermark="True" Margin="10 5" BorderBrush="{x:Null}" Value="{Binding SelectedItem.DefendSpotZLimit, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                            <Controls:ToggleSwitch x:Name="chkDefendSpotResetTimerOnCombat" IsChecked="{Binding SelectedItem.ResetTimerOnCombat, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" OnLabel="Reset Timer on combat" OffLabel="Reset Timer on combat" Margin="10 5"/>
                        </StackPanel>
                    </GroupBox>
                </StackPanel>

                <!--Defend Violet Hold-->
                <StackPanel>
                    <StackPanel.Style>
                        <Style TargetType="StackPanel">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=ProfileStepControl, Path=SelectedItem, Converter={StaticResource TypeConverter}}" Value="DefendVioletHoldModel">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </StackPanel.Style>
                    <GroupBox Header="Defend Violet Hold Step" BorderBrush="{x:Null}">
                        <GroupBox.Background>
                            <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                <GradientStop Color="#FF34e89e" Offset="0"/>
                                <GradientStop Color="#FF0f3443" Offset="1"/>
                            </LinearGradientBrush>
                        </GroupBox.Background>
                        <StackPanel>

                            <StackPanel Orientation="Horizontal"  Margin="5">
                                <TextBox Name="txtDefendVioletHoldTargetPos" MinWidth="200" Controls:TextBoxHelper.UseFloatingWatermark="True" Controls:TextBoxHelper.Watermark="Defend Position" Margin="5">
                                    <TextBox.Text>
                                        <Binding  NotifyOnValidationError="True" UpdateSourceTrigger="PropertyChanged" Path="SelectedItem.DefendPosition" Converter="{StaticResource TextBoxVectorConverter}">
                                            <Binding.ValidationRules>
                                                <local:VectorValidation/>
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <Button x:Name="btnDefendVioletHoldGetCurrentPos" Content="Get Current Position" Margin="5" Click="btnDefendVioletHoldGetCurrentPos_Click" />
                            </StackPanel>
                            <Controls:NumericUpDown x:Name="txtDefendVioletHoldRadius" Controls:TextBoxHelper.Watermark="Defend radius" Controls:TextBoxHelper.UseFloatingWatermark="True" Margin="10 5" BorderBrush="{x:Null}" Value="{Binding SelectedItem.DefendSpotRadius, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                            <Controls:NumericUpDown x:Name="txtDefendVioletHoldTimer" Controls:TextBoxHelper.Watermark="Duration in seconds" Controls:TextBoxHelper.UseFloatingWatermark="True" Margin="10 5" BorderBrush="{x:Null}" Value="{Binding SelectedItem.Timer, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                            <Controls:NumericUpDown x:Name="txtDefendVioletHoldtZLimit" Controls:TextBoxHelper.Watermark="Z Limit" Controls:TextBoxHelper.UseFloatingWatermark="True" Margin="10 5" BorderBrush="{x:Null}" Value="{Binding SelectedItem.DefendSpotZLimit, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                            <Controls:ToggleSwitch x:Name="chkDefendVioletHoldResetTimerOnCombat" IsChecked="{Binding SelectedItem.ResetTimerOnCombat, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" OnLabel="Reset Timer on combat" OffLabel="Reset Timer on combat" Margin="10 5"/>
                        </StackPanel>
                    </GroupBox>
                </StackPanel>

                <!--FollowUnit-->
                <StackPanel>
                    <StackPanel.Style>
                        <Style TargetType="StackPanel">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=ProfileStepControl, Path=SelectedItem, Converter={StaticResource TypeConverter}}" Value="FollowUnitModel">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </StackPanel.Style>
                    <GroupBox Header="FollowUnit Step" BorderBrush="{x:Null}">
                        <GroupBox.Background>
                            <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                <GradientStop Color="#FF34e89e" Offset="0"/>
                                <GradientStop Color="#FF0f3443" Offset="1"/>
                            </LinearGradientBrush>
                        </GroupBox.Background>
                        <StackPanel>
                            <StackPanel Orientation="Horizontal"  Margin="5">
                                <TextBox Name="txtFollowUnitStartPos" MinWidth="200" Controls:TextBoxHelper.UseFloatingWatermark="True" Controls:TextBoxHelper.Watermark="Start Position" Margin="5">
                                    <TextBox.Text>
                                        <Binding  NotifyOnValidationError="True" UpdateSourceTrigger="PropertyChanged" Path="SelectedItem.ExpectedStartPosition" Converter="{StaticResource TextBoxVectorConverter}">
                                            <Binding.ValidationRules>
                                                <local:VectorValidation/>
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <Button x:Name="btnFollowUnitGetCurrentPosStart" Content="Get Target Position" Margin="5" Click="btnFollowUnitGetCurrentPosStart_Click" />
                            </StackPanel>
                            <StackPanel Orientation="Horizontal"  Margin="5">
                                <TextBox Name="txtFollowUnitEndPos" MinWidth="200" Controls:TextBoxHelper.UseFloatingWatermark="True" Controls:TextBoxHelper.Watermark="End Position" Margin="5">
                                    <TextBox.Text>
                                        <Binding  NotifyOnValidationError="True" UpdateSourceTrigger="PropertyChanged" Path="SelectedItem.ExpectedEndPosition" Converter="{StaticResource TextBoxVectorConverter}">
                                            <Binding.ValidationRules>
                                                <local:VectorValidation/>
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <Button x:Name="btnFollowUnitGetCurrentPosEnd" Content="Get Target Position" Margin="5" Click="btnFollowUnitGetCurrentPosEnd_Click" />
                            </StackPanel>
                            <StackPanel Orientation="Horizontal"  Margin="5">
                                <Controls:NumericUpDown x:Name="txtFollowUnitId" Controls:TextBoxHelper.Watermark="Unit ID" Controls:TextBoxHelper.UseFloatingWatermark="True" Margin="5" BorderBrush="{x:Null}" Value="{Binding SelectedItem.UnitId, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                <Button x:Name="btnGetFollowUnitId" Content="Get Target Unit Id" Margin="5" Click="btnGetFollowUnitId_Click" />
                            </StackPanel>
                            <Controls:ToggleSwitch x:Name="chkFollowUnitSkipIfNotFound" IsChecked="{Binding SelectedItem.SkipIfNotFound, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" OnLabel="Skip If Not Found" OffLabel="Skip If Not Found" Margin="10 5"/>
                        </StackPanel>
                    </GroupBox>
                </StackPanel>

                <!--PullToSafeSpot-->
                <StackPanel>
                    <StackPanel.Style>
                        <Style TargetType="StackPanel">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=ProfileStepControl, Path=SelectedItem, Converter={StaticResource TypeConverter}}" Value="PullToSafeSpotModel">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </StackPanel.Style>
                    <GroupBox Header="PullToSafeSpot Step" BorderBrush="{x:Null}">
                        <GroupBox.Background>
                            <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                <GradientStop Color="#FF34e89e" Offset="0"/>
                                <GradientStop Color="#FF0f3443" Offset="1"/>
                            </LinearGradientBrush>
                        </GroupBox.Background>
                        <StackPanel>
                            <!-- Safe spot position -->
                            <StackPanel Orientation="Horizontal"  Margin="5">
                                <TextBox Name="txtPullToSafeSpotSafePosition" MinWidth="200" Controls:TextBoxHelper.UseFloatingWatermark="True" Controls:TextBoxHelper.Watermark="Safe spot" Margin="5">
                                    <TextBox.Text>
                                        <Binding  NotifyOnValidationError="True" UpdateSourceTrigger="PropertyChanged" Path="SelectedItem.SafeSpotPosition" Converter="{StaticResource TextBoxVectorConverter}">
                                            <Binding.ValidationRules>
                                                <local:VectorValidation/>
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <Button x:Name="btnPullToSafeSpotGetCurrentPosSafeSpot" Content="Get Current Position" Margin="5" Click="btnPullToSafeSpotGetCurrentPosSafeSpot_Click" />
                            </StackPanel>
                            <!-- Safe spot radius -->
                            <StackPanel Orientation="Horizontal"  Margin="5">
                                <Controls:NumericUpDown x:Name="txtSafeSpotRadius" Controls:TextBoxHelper.Watermark="Safe spot radius" Controls:TextBoxHelper.UseFloatingWatermark="True" Margin="5" BorderBrush="{x:Null}" Value="{Binding SelectedItem.SafeSpotRadius, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                            </StackPanel>
                            <!-- Zone to clear position -->
                            <StackPanel Orientation="Horizontal"  Margin="5">
                                <TextBox Name="txtPullToSafeSpotZoneToClear" MinWidth="200" Controls:TextBoxHelper.UseFloatingWatermark="True" Controls:TextBoxHelper.Watermark="Zone to clear" Margin="5">
                                    <TextBox.Text>
                                        <Binding  NotifyOnValidationError="True" UpdateSourceTrigger="PropertyChanged" Path="SelectedItem.ZoneToClearPosition" Converter="{StaticResource TextBoxVectorConverter}">
                                            <Binding.ValidationRules>
                                                <local:VectorValidation/>
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <Button x:Name="btnPullToSafeSpotGetCurrentPosZoneToClear" Content="Get Current Position" Margin="5" Click="btnPullToSafeSpotGetCurrentPosZoneToClear_Click" />
                            </StackPanel>
                            <!-- Zone to clear radius && Zone to clear Z limit-->
                            <StackPanel Orientation="Horizontal"  Margin="5">
                                <Controls:NumericUpDown x:Name="txtZoneToClearRadius" Controls:TextBoxHelper.Watermark="Zone to clear radius" Controls:TextBoxHelper.UseFloatingWatermark="True" Margin="5" BorderBrush="{x:Null}" Value="{Binding SelectedItem.ZoneToClearRadius, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                <Controls:NumericUpDown x:Name="txtZoneToClearZLimit" Controls:TextBoxHelper.Watermark="Z limit" Controls:TextBoxHelper.UseFloatingWatermark="True" Margin="5" BorderBrush="{x:Null}" Value="{Binding SelectedItem.ZoneToClearZLimit, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                            </StackPanel>
                        </StackPanel>
                    </GroupBox>
                </StackPanel>

                <!--Regroup-->
                <StackPanel>
                    <StackPanel.Style>
                        <Style TargetType="StackPanel">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=ProfileStepControl, Path=SelectedItem, Converter={StaticResource TypeConverter}}" Value="RegroupModel">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </StackPanel.Style>
                    <GroupBox Header="Regroup Step" BorderBrush="{x:Null}">
                        <GroupBox.Background>
                            <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                <GradientStop Color="#FF34e89e" Offset="0"/>
                                <GradientStop Color="#FF0f3443" Offset="1"/>
                            </LinearGradientBrush>
                        </GroupBox.Background>
                        <StackPanel>
                            <StackPanel Orientation="Horizontal"  Margin="5">
                                <!--<TextBox x:Name="txtRegroupSpot" Controls:TextBoxHelper.Watermark="Regroup Position" Controls:TextBoxHelper.UseFloatingWatermark="True" Margin="5" BorderBrush="{x:Null}" Text="{Binding SelectedItem.RegroupSpot, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"  IsReadOnly="True"/>-->
                                <TextBox Name="txtRegroupSpot" MinWidth="200" Controls:TextBoxHelper.UseFloatingWatermark="True" Controls:TextBoxHelper.Watermark="Regroup Position" Margin="5">
                                    <TextBox.Text>
                                        <Binding  NotifyOnValidationError="True" UpdateSourceTrigger="PropertyChanged" Path="SelectedItem.RegroupSpot" Converter="{StaticResource TextBoxVectorConverter}">
                                            <Binding.ValidationRules>
                                                <local:VectorValidation/>
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <Button x:Name="btnRegroupSpotMyPosition" Content="Get my Position" Margin="5" Click="btnRegroupSpotMyPosition_Click" />
                            </StackPanel>
                        </StackPanel>
                    </GroupBox>
                </StackPanel>
                <!--LeaveDungeon-->
                <StackPanel>
                    <StackPanel.Style>
                        <Style TargetType="StackPanel">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=ProfileStepControl, Path=SelectedItem, Converter={StaticResource TypeConverter}}" Value="LeaveDungeonModel">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </StackPanel.Style>
                    <GroupBox Header="Regroup Step" BorderBrush="{x:Null}">
                        <GroupBox.Background>
                            <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                <GradientStop Color="#FF34e89e" Offset="0"/>
                                <GradientStop Color="#FF0f3443" Offset="1"/>
                            </LinearGradientBrush>
                        </GroupBox.Background>
                    </GroupBox>
                </StackPanel>
                <!-- JumpToStep -->
                <StackPanel>
                    <StackPanel.Style>
                        <Style TargetType="StackPanel">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=ProfileStepControl, Path=SelectedItem, Converter={StaticResource TypeConverter}}" Value="JumpToStepModel">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </StackPanel.Style>
                    <GroupBox Header="Jump to Step" BorderBrush="{x:Null}">
                        <GroupBox.Background>
                            <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                <GradientStop Color="#FF34e89e" Offset="0"/>
                                <GradientStop Color="#FF0f3443" Offset="1"/>
                            </LinearGradientBrush>
                        </GroupBox.Background>
                        <StackPanel>
                            <StackPanel Orientation="Vertical"  Margin="5">
                                <TextBlock Margin="5" MaxWidth="250" TextWrapping="Wrap" HorizontalAlignment="Center">Jump to a specific step if the complete condition is met.</TextBlock>
                                <TextBox x:Name="txtJumpToStep" Controls:TextBoxHelper.Watermark="Step name to jump to" Controls:TextBoxHelper.UseFloatingWatermark="True" Margin="5" BorderBrush="{x:Null}" Text="{Binding SelectedItem.StepToJumpTo, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                            </StackPanel>
                        </StackPanel>
                    </GroupBox>
                </StackPanel>
            
                <!--Complete Condition-->
                <StackPanel x:Name="spHasCond">
                    <ComboBox Name="cbConditionType" SelectedValue="{Binding SelectedItem.CompleteCondition.ConditionType, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="5" Controls:TextBoxHelper.UseFloatingWatermark="True" Controls:TextBoxHelper.Watermark="Complete condition" />
                    <!--FlagsChanged-->
                    <StackPanel Name="spFlagsChanged">
                        <StackPanel.Style>
                            <Style TargetType="StackPanel">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=cbConditionType, Path=SelectedValue}" Value="FlagsChanged">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </StackPanel.Style>
                        <StackPanel x:Name="spConditionGameObjectFlags" Orientation="Horizontal"  Margin="5">
                            <Controls:NumericUpDown Name="nudInitialFlags" Value="{Binding SelectedItem.CompleteCondition.InitialFlags, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Controls:TextBoxHelper.UseFloatingWatermark="True" Controls:TextBoxHelper.Watermark="InitalFlags" Margin="5" />
                            <Button x:Name="btnGetNearestGOFlags" Content="Get Closest GameObject Flags" Margin="5" Click="btnGetNearestGOFlags_Click"/>
                        </StackPanel>
                        <StackPanel x:Name="spConditionGameObjectId" Orientation="Horizontal"  Margin="5">
                            <Controls:NumericUpDown Name="nudGameObject" Value="{Binding SelectedItem.CompleteCondition.FlagsChangedGameObjectId, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Controls:TextBoxHelper.UseFloatingWatermark="True" Controls:TextBoxHelper.Watermark="GameObject Entry" Margin="5"/>
                            <Button x:Name="btnGetNearestGOId" Content="Get Closest GameObject Id" Margin="5" Click="btnGetNearestGOId_Click"/>
                        </StackPanel>
                    </StackPanel>
                    <!--MobAtPosition-->
                    <StackPanel>
                        <StackPanel.Style>
                            <Style TargetType="StackPanel">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=cbConditionType, Path=SelectedValue}" Value="MobAtPosition">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </StackPanel.Style>
                        <StackPanel>
                            <Controls:ToggleSwitch IsChecked="{Binding SelectedItem.CompleteCondition.MobAtPositionMustReturnTrue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" OnLabel="Condition must return True" OffLabel="Condition must return False" Margin="5"/>
                        </StackPanel>
                        <StackPanel x:Name="spConditionMobPosId" Orientation="Horizontal"  Margin="5">
                            <Controls:NumericUpDown Name="nudMobPosId" Value="{Binding SelectedItem.CompleteCondition.MobAtPositionId, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Controls:TextBoxHelper.UseFloatingWatermark="True" Controls:TextBoxHelper.Watermark="Mob Id" Margin="5"/>
                            <Button x:Name="btnGetTargetMobPosEntry" Content="Get Target Mob Id" Margin="5" Click="btnGetTargetMobPosEntry_Click" />
                        </StackPanel>
                        <StackPanel x:Name="spConditionMobPosVector" Orientation="Horizontal"  Margin="5">
                            <TextBox Name="nudMobPosVector" MinWidth="200" Controls:TextBoxHelper.UseFloatingWatermark="True" Controls:TextBoxHelper.Watermark="Mob Position" Margin="5">
                                <TextBox.Text>
                                    <Binding  NotifyOnValidationError="True" UpdateSourceTrigger="PropertyChanged" Path="SelectedItem.CompleteCondition.MobAtPositionVector" Converter="{StaticResource TextBoxVectorConverter}">
                                        <Binding.ValidationRules>
                                            <local:VectorValidation/>
                                        </Binding.ValidationRules>
                                    </Binding>
                                </TextBox.Text>
                            </TextBox>
                            <Button x:Name="btnGetTargetMobPosVector" Content="Get Target Mob Position" Margin="5" Click="btnGetTargetMobPosVector_Click" />
                        </StackPanel>
                    </StackPanel>
                    <!-- Mob Attackable-->
                    <StackPanel>
                        <StackPanel.Style>
                            <Style TargetType="StackPanel">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=cbConditionType, Path=SelectedValue}" Value="MobAttackable">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </StackPanel.Style>
                        <StackPanel>
                            <Controls:ToggleSwitch IsChecked="{Binding SelectedItem.CompleteCondition.MobAttackableMustReturnTrue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" OnLabel="Condition must return True" OffLabel="Condition must return False" Margin="5"/>
                        </StackPanel>
                        <StackPanel>
                            <Controls:ToggleSwitch IsChecked="{Binding SelectedItem.CompleteCondition.MobAttackableSkipIfAbsent, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" OnLabel="Complete if absent" OffLabel="Incomplete if absent" Margin="5"/>
                        </StackPanel>
                        <StackPanel x:Name="spConditionMobAttackable" Orientation="Horizontal"  Margin="5">
                            <Controls:NumericUpDown Name="nudMobAttackable" Value="{Binding SelectedItem.CompleteCondition.MobAttackableEntry, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Controls:TextBoxHelper.UseFloatingWatermark="True" Controls:TextBoxHelper.Watermark="Mob Id" Margin="5"/>
                            <Button x:Name="btnGetTargetMobAttackableEntry" Content="Get Target Mob Id" Margin="5" Click="btnGetTargetMobAttackableEntry_Click" />
                        </StackPanel>
                    </StackPanel>
                    <!--MobDead-->
                    <StackPanel x:Name="spConditionMobDead" Orientation="Vertical" Margin="5">
                        <StackPanel.Style>
                            <Style TargetType="StackPanel">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=cbConditionType, Path=SelectedValue}" Value="MobDead">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </StackPanel.Style>
                        <StackPanel>
                            <Controls:ToggleSwitch IsChecked="{Binding SelectedItem.CompleteCondition.MobDeadMustReturnTrue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" OnLabel="Condition must return True" OffLabel="Condition must return False" Margin="5"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <Controls:NumericUpDown Name="nudMobDeadId" Value="{Binding SelectedItem.CompleteCondition.DeadMobId, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Controls:TextBoxHelper.UseFloatingWatermark="True" Controls:TextBoxHelper.Watermark="Mob Id" Margin="5"/>
                            <Button x:Name="btnGetTargetMobDeadEntry" Content="Get Target Mob Id" Margin="5" Click="btnGetTargetMobDeadEntry_Click" />
                        </StackPanel>
                    </StackPanel>
                    <!--HaveItem-->
                    <StackPanel Margin="5">
                        <StackPanel.Style>
                            <Style TargetType="StackPanel">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=cbConditionType, Path=SelectedValue}" Value="HaveItem">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </StackPanel.Style>
                        <StackPanel>
                            <Controls:ToggleSwitch IsChecked="{Binding SelectedItem.CompleteCondition.HaveItemMustReturnTrue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" OnLabel="Condition must return True" OffLabel="Condition must return False" Margin="5"/>
                        </StackPanel>
                        <Controls:NumericUpDown Name="nudItemId" Value="{Binding SelectedItem.CompleteCondition.HaveItemId, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Controls:TextBoxHelper.UseFloatingWatermark="True" Controls:TextBoxHelper.Watermark="Item Entry" Margin="5"/>
                    </StackPanel>
                    <!--LOSCheck-->
                    <StackPanel Margin="5">
                        <StackPanel.Style>
                            <Style TargetType="StackPanel">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=cbConditionType, Path=SelectedValue}" Value="LOSCheck">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </StackPanel.Style>
                        <StackPanel>
                            <Controls:ToggleSwitch IsChecked="{Binding SelectedItem.CompleteCondition.LOSMustReturnTrue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" OnLabel="Condition must return True" OffLabel="Condition must return False" Margin="5"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal"  Margin="5">
                            <TextBox Name="txtLOSCheckPosFrom" MinWidth="200" Controls:TextBoxHelper.UseFloatingWatermark="True" Controls:TextBoxHelper.Watermark="LOS From" Margin="5">
                                <TextBox.Text>
                                    <Binding NotifyOnValidationError="True" UpdateSourceTrigger="PropertyChanged" Path="SelectedItem.CompleteCondition.LOSPositionVectorFrom" Converter="{StaticResource TextBoxVectorConverter}">
                                        <Binding.ValidationRules>
                                            <local:VectorValidation/>
                                        </Binding.ValidationRules>
                                    </Binding>
                                </TextBox.Text>
                            </TextBox>
                            <Button x:Name="btnGetLOSCheckPosVectorFrom" Content="Get Position" Margin="5" Click="btnGetLOSCheckPosVectorFrom_Click"  />
                        </StackPanel>
                        <StackPanel Orientation="Horizontal"  Margin="5">
                            <TextBox Name="txtLOSCheckPosTo" MinWidth="200" Controls:TextBoxHelper.UseFloatingWatermark="True" Controls:TextBoxHelper.Watermark="LOS To" Margin="5">
                                <TextBox.Text>
                                    <Binding NotifyOnValidationError="True" UpdateSourceTrigger="PropertyChanged" Path="SelectedItem.CompleteCondition.LOSPositionVectorTo" Converter="{StaticResource TextBoxVectorConverter}">
                                        <Binding.ValidationRules>
                                            <local:VectorValidation/>
                                        </Binding.ValidationRules>
                                    </Binding>
                                </TextBox.Text>
                            </TextBox>
                            <Button x:Name="btnGetLOSCheckPosVectorTo" Content="Get Position" Margin="5" Click="btnGetLOSCheckPosVectorTo_Click" />
                        </StackPanel>
                    </StackPanel>
                    <!--CanGossip-->
                    <StackPanel Orientation="Vertical"  Margin="5">
                        <StackPanel.Style>
                            <Style TargetType="StackPanel">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=cbConditionType, Path=SelectedValue}" Value="CanGossip">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </StackPanel.Style>
                        <StackPanel>
                            <Controls:ToggleSwitch IsChecked="{Binding SelectedItem.CompleteCondition.CanGossipMustReturnTrue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" OnLabel="Condition must return True" OffLabel="Condition must return False" Margin="5"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <Controls:NumericUpDown Name="nudCanGossipId" Value="{Binding SelectedItem.CompleteCondition.CanGossipMobId, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Controls:TextBoxHelper.UseFloatingWatermark="True" Controls:TextBoxHelper.Watermark="Mob Id" Margin="5"/>
                            <Button x:Name="btnGetCanGossipEntry" Content="Get Target Mob Id" Margin="5" Click="btnGetCanGossipEntry_Click" />
                        </StackPanel>
                    </StackPanel>
                    <!--Timer-->
                    <StackPanel Orientation="Vertical"  Margin="5">
                        <StackPanel.Style>
                            <Style TargetType="StackPanel">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=cbConditionType, Path=SelectedValue}" Value="Timer">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </StackPanel.Style>
                        <StackPanel Orientation="Horizontal">
                            <Controls:NumericUpDown Name="nudTimerSeconds" Value="{Binding SelectedItem.CompleteCondition.TimerTimeInSeconds, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Controls:TextBoxHelper.UseFloatingWatermark="True" Controls:TextBoxHelper.Watermark="Timer (seconds)" Margin="5" Minimum="0"/>
                        </StackPanel>
                    </StackPanel>
                </StackPanel>
            </StackPanel>
        </Grid>
    </ScrollViewer>
</UserControl>
